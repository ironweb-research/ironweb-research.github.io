import { serialize } from 'next-mdx-remote/serialize';
import matter, { GrayMatterFile } from "gray-matter";
import { Metadata } from "next";
import fs from 'fs';
import path from 'path';
import ContentRenderer from '@/app/_components/language_handler/mdx_lang_renderer';
import Container from "@/app/_components/container";
import { PostBody } from "@/app/_components/post_generation/post-body";


export default async function PrivacyPage(props: Params) {
  const params = await props.params;
  const filePath = path.join(process.cwd(), 'lib', `privacy_${params.lang}.mdx`);


  const fileContent = fs.readFileSync(filePath, 'utf8');
  // const mdxSource = await serialize(fileContent);
  const mdxSource: GrayMatterFile<string> = matter(fileContent);


  return (
    <main>
      <Container>
                  {/* <PostBody content={mdxSource} /> */}
        
        <ContentRenderer content={mdxSource.content as string} />;
      </Container>
    </main>
);
}

type Params = {
  params: Promise<{
    lang: string;
  }>;
};



export async function generateMetadata(props: Params): Promise<Metadata>{
  const params = await props.params;
  const lang = params.lang;
  const title = lang === 'en' ? 'Privacy Statement' : '隐私声明';
  const description = lang === 'en' ? 'Privacy statement in English.' : '中文隐私声明。';

  return {
    title,
    openGraph: {
      title,
      description,
    },
  }
}

export async function generateStaticParams() {
  return [
    { lang: 'en' },
    { lang: 'cn' },
  ];
}// ok

// export async function getStaticProps({ params }) {
//   const { lang } = params;
//   const filePath = path.join(process.cwd(), 'lib', `privacy_${lang}.mdx`);
//   const fileContent = fs.readFileSync(filePath, 'utf8');
//   const mdxSource = await serialize(fileContent);

//   return {
//     props: {
//       mdxSource,
//     },
//   };
// }